package org.matsim.prepare.population;

import org.apache.commons.math3.distribution.EnumeratedIntegerDistribution;
import org.apache.commons.math3.random.Well19937c;

import java.util.stream.IntStream;

/**
 * Detailed age distribution of Berlin population.
 * Source: https://www.demografie-portal.de/DE/Fakten/bevoelkerung-altersstruktur-berlin.html
 */
public class AgeDistribution implements AttributeDistribution<Integer> {

	private static final double[] MEN = {
		18041,
		20061,
		19534,
		19502,
		19439,
		19697,
		19510,
		18963,
		18531,
		17918,
		17935,
		17093,
		17286,
		16961,
		17181,
		16785,
		15944,
		16000,
		16367,
		16254,
		17552,
		18492,
		20597,
		21810,
		23418,
		25957,
		27124,
		28083,
		29148,
		30056,
		30809,
		32234,
		35940,
		35495,
		35393,
		34587,
		33206,
		31856,
		30852,
		29448,
		29439,
		28369,
		27705,
		25655,
		24620,
		23734,
		22430,
		21699,
		21012,
		20230,
		21244,
		23302,
		23427,
		24492,
		25536,
		25497,
		26154,
		27152,
		27093,
		26886,
		25283,
		23579,
		22739,
		21464,
		19220,
		18138,
		17541,
		16877,
		16165,
		15532,
		14921,
		14926,
		15139,
		14155,
		12818,
		11707,
		9189,
		9783,
		12756,
		13095,
		11831,
		13120,
		11814,
		10250,
		8943,
		7521,
		6605,
		5632,
		4523,
		2763,
		2100,
		1759,
		1408,
		1061,
		758,
		482,
		310,
		179,
		109,
		81,
		185
	};

	private static final double[] WOMEN = {
		16813,
		18903,
		18466,
		18392,
		18513,
		18605,
		18721,
		17761,
		17849,
		16895,
		16954,
		16104,
		16394,
		16191,
		16078,
		15514,
		15270,
		14924,
		15406,
		16184,
		17529,
		19026,
		20902,
		22146,
		23898,
		26003,
		27452,
		28410,
		29198,
		30142,
		30355,
		31246,
		34960,
		34602,
		34573,
		33029,
		31750,
		30649,
		29134,
		28593,
		28144,
		27734,
		26775,
		25073,
		23876,
		23315,
		22491,
		21278,
		20758,
		20358,
		20929,
		22815,
		23217,
		23801,
		25119,
		24989,
		26451,
		26694,
		27373,
		27059,
		25725,
		24553,
		22998,
		22151,
		20247,
		19412,
		19103,
		18990,
		18908,
		18583,
		18445,
		18661,
		19384,
		17792,
		16078,
		15072,
		11292,
		12757,
		16424,
		17266,
		16037,
		17966,
		16715,
		15345,
		13646,
		12251,
		10779,
		9519,
		8031,
		5146,
		4215,
		3693,
		3321,
		2693,
		1982,
		1454,
		1131,
		873,
		564,
		360,
		710
	};
	private final EnumeratedIntegerDistribution distribution;

	/**
	 * Construct a new age distribution, bounded and for specific gender.
	 */
	public AgeDistribution(int lowerAge, int upperAgeExclusive, Gender gender, long seed) {
		double[] probs = new double[upperAgeExclusive - lowerAge];
		for (int i = 0; i < probs.length; i++) {
			probs[i] = gender == Gender.MALE ? MEN[lowerAge + i] : WOMEN[lowerAge + i];
		}

		this.distribution = new EnumeratedIntegerDistribution(new Well19937c(seed), IntStream.range(lowerAge, upperAgeExclusive).toArray(), probs);
	}

	@Override
	public Integer sample() {
		return distribution.sample();
	}

	/**
	 * Gender of the age distribution.
	 */
	public enum Gender {
		FEMALE,
		MALE
	}
}
